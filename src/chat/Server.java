/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Cristina Mihailescu
 */
public class Server extends javax.swing.JFrame {

    private static final int PORT = 4444;

    public static class Info {

        public String numeUtilizator;
        public PrintWriter fluxCatreUtilizator;

        public Info(String numeUtilizator, PrintWriter fluxCatreUtilizator) {
            this.numeUtilizator = numeUtilizator;
            this.fluxCatreUtilizator = fluxCatreUtilizator;
        }
    }

    private static HashSet<Info> info = new HashSet<Info>();

    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msgServer = new javax.swing.JScrollPane();
        infoArea = new javax.swing.JTextArea();
        start = new javax.swing.JButton();
        stop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        infoArea.setEditable(false);
        infoArea.setBackground(new java.awt.Color(102, 102, 102));
        infoArea.setColumns(20);
        infoArea.setForeground(new java.awt.Color(204, 204, 204));
        infoArea.setRows(5);
        msgServer.setViewportView(infoArea);

        start.setText("Start");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        stop.setText("Stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msgServer, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msgServer, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static class FirUtilizator extends Thread {

        private String nume;
        private Socket socket;
        //private Socket otherSocket;
        private BufferedReader in;//, in2;
        private PrintWriter out;

        public FirUtilizator(Socket socket) {
            this.socket = socket;
        }

        /*FirUtilizator(Socket s, int x) {
            otherSocket = s;
        }*/

        @Override
        public void run() {
            try {
                //se creeaza fluxurile de comunicare cu clientul
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                //in2 = new BufferedReader(new InputStreamReader(otherSocket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);

                boolean duplicat = false;
                //login - solicit un nume pana cand primesc unul care nu e folosit inca
                while (true) {
                    if (!duplicat) {
                        out.println("Nume utilizator?");
                        duplicat = true;
                    } else {
                        out.println("Nume existent!");
                    }

                    nume = in.readLine();

                    synchronized (this) {
                        boolean ok = true;
                        for (Info x : info) {
                            if (x.numeUtilizator.equals(nume)) {
                                ok = false;
                                break;
                            }
                        }

                        if (ok) {
                            info.add(new Info(nume, out));
                            break;
                        }
                    }
                }
                out.println("Nume acceptat!");
                infoArea.append("Utilizatorul " + nume + " s-a conectat la server!" + "\n");

                //server-ul preia mesajele clientului si le transmite tuturor celorlalti clienti 
                String nameAndInput;
                while (true) {
                    nameAndInput = in.readLine();

                    String receiverName = nameAndInput.substring(0, nameAndInput.indexOf(':'));

                    boolean ok = false;

                    for (Info x : info) {
                        if ((x.numeUtilizator).equals(receiverName)) {
                            //out.println("Nume acceptat!");
                            ok = true;
                            break;
                        }
                    }

                    if (!ok) {
                        out.println("Nume incorect!");
                        continue;
                    }

                    String message = nameAndInput.substring(receiverName.length() + 1);

                    /*if (in2.readLine().startsWith("___")) {
                        try
                        {
                            ObjectOutputStream objectOutput = new ObjectOutputStream(otherSocket.getOutputStream());
                            objectOutput.writeObject(threads);
                        }
                        catch (IOException e)
                        {
                            e.printStackTrace();
                        }
                    }*/

                    System.out.println(nameAndInput);

                    synchronized (this) {
                        for (Info x : info) {
                            if (x.numeUtilizator.equals(receiverName)) {
                                PrintWriter pr = x.fluxCatreUtilizator;
                                pr.println(nume + ": " + message);
                            }
                        }
                    }
                }
            } catch (Exception ex) {
                System.out.println(ex);
            } finally {
                //clientul s-a deconectat, deci trebuie sa fie eliminat 
                //din lista clientilor activi

                infoArea.append("Utilizatorul " + nume + " s-a deconectat de la server!" + "\n");

                Info x = new Info(nume, out);

                if (nume != null && out != null) {
                    info.remove(x);
                }
                try {
                    socket.close();
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
    }

    private void afisare(String msg) {
        infoArea.append(msg + "\n");
    }

    ServerSocket ServerChat;//, serverList;
    /*static */ArrayList<FirUtilizator> threads = new ArrayList<FirUtilizator>();

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        try {
            ServerChat = new ServerSocket(PORT);
            //serverList = new ServerSocket(5678);

            (new Thread() {
                public void run() {
                    infoArea.append("Server-ul a pornit!\n");
                }
            }).start();

            (new Thread() {
                public void run() {
                    while (true) {
                        try {
                            Socket cs = ServerChat.accept();
                            //Socket cs2 = serverList.accept();
                            FirUtilizator t = new FirUtilizator(cs);
                            //FirUtilizator tl = new FirUtilizator(cs2, 0);
                            t.start();
                            //tl.start();
                            threads.add(t);
                        } catch (IOException ex) {
                            System.out.println("Oops");
                            break;
                        }
                    }
                }
            }).start();

        } catch (Exception e) {
            infoArea.append("Server-ul nu poate porni!" + "\n");
        }
    }//GEN-LAST:event_startActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        for (Info x : info) {
            info.remove(x);
        }
        try {
            ServerChat.close();
            for (FirUtilizator t : threads) {
                t.interrupt();
            }
        } catch (IOException ex) {
            infoArea.append("Oops, eroare! Serverul nu se poate inchide!" + "\n");
        }

        infoArea.append("Server-ul s-a inchis!" + "\n");
    }//GEN-LAST:event_stopActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea infoArea;
    private javax.swing.JScrollPane msgServer;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables
}
